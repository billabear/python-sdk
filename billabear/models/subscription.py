# coding: utf-8

"""
    BillaBear

    The REST API provided by BillaBear  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@billabear.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Subscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'seat_number': 'int',
        'schedule': 'str',
        'status': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'ended_at': 'str',
        'valid_until': 'str',
        'main_external_reference': 'str',
        'child_external_reference': 'str',
        'metadata': 'object',
        'price': 'Price',
        'plan': 'SubscriptionPlan'
    }

    attribute_map = {
        'id': 'id',
        'seat_number': 'seat_number',
        'schedule': 'schedule',
        'status': 'status',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'ended_at': 'ended_at',
        'valid_until': 'valid_until',
        'main_external_reference': 'main_external_reference',
        'child_external_reference': 'child_external_reference',
        'metadata': 'metadata',
        'price': 'price',
        'plan': 'plan'
    }

    def __init__(self, id=None, seat_number=None, schedule=None, status=None, created_at=None, updated_at=None, ended_at=None, valid_until=None, main_external_reference=None, child_external_reference=None, metadata=None, price=None, plan=None):  # noqa: E501
        """Subscription - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._seat_number = None
        self._schedule = None
        self._status = None
        self._created_at = None
        self._updated_at = None
        self._ended_at = None
        self._valid_until = None
        self._main_external_reference = None
        self._child_external_reference = None
        self._metadata = None
        self._price = None
        self._plan = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if seat_number is not None:
            self.seat_number = seat_number
        if schedule is not None:
            self.schedule = schedule
        if status is not None:
            self.status = status
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if ended_at is not None:
            self.ended_at = ended_at
        if valid_until is not None:
            self.valid_until = valid_until
        if main_external_reference is not None:
            self.main_external_reference = main_external_reference
        if child_external_reference is not None:
            self.child_external_reference = child_external_reference
        if metadata is not None:
            self.metadata = metadata
        if price is not None:
            self.price = price
        if plan is not None:
            self.plan = plan

    @property
    def id(self):
        """Gets the id of this Subscription.  # noqa: E501


        :return: The id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.


        :param id: The id of this Subscription.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def seat_number(self):
        """Gets the seat_number of this Subscription.  # noqa: E501


        :return: The seat_number of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._seat_number

    @seat_number.setter
    def seat_number(self, seat_number):
        """Sets the seat_number of this Subscription.


        :param seat_number: The seat_number of this Subscription.  # noqa: E501
        :type: int
        """

        self._seat_number = seat_number

    @property
    def schedule(self):
        """Gets the schedule of this Subscription.  # noqa: E501


        :return: The schedule of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Subscription.


        :param schedule: The schedule of this Subscription.  # noqa: E501
        :type: str
        """

        self._schedule = schedule

    @property
    def status(self):
        """Gets the status of this Subscription.  # noqa: E501


        :return: The status of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Subscription.


        :param status: The status of this Subscription.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this Subscription.  # noqa: E501


        :return: The created_at of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Subscription.


        :param created_at: The created_at of this Subscription.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Subscription.  # noqa: E501


        :return: The updated_at of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Subscription.


        :param updated_at: The updated_at of this Subscription.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def ended_at(self):
        """Gets the ended_at of this Subscription.  # noqa: E501


        :return: The ended_at of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this Subscription.


        :param ended_at: The ended_at of this Subscription.  # noqa: E501
        :type: str
        """

        self._ended_at = ended_at

    @property
    def valid_until(self):
        """Gets the valid_until of this Subscription.  # noqa: E501


        :return: The valid_until of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this Subscription.


        :param valid_until: The valid_until of this Subscription.  # noqa: E501
        :type: str
        """

        self._valid_until = valid_until

    @property
    def main_external_reference(self):
        """Gets the main_external_reference of this Subscription.  # noqa: E501


        :return: The main_external_reference of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._main_external_reference

    @main_external_reference.setter
    def main_external_reference(self, main_external_reference):
        """Sets the main_external_reference of this Subscription.


        :param main_external_reference: The main_external_reference of this Subscription.  # noqa: E501
        :type: str
        """

        self._main_external_reference = main_external_reference

    @property
    def child_external_reference(self):
        """Gets the child_external_reference of this Subscription.  # noqa: E501


        :return: The child_external_reference of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._child_external_reference

    @child_external_reference.setter
    def child_external_reference(self, child_external_reference):
        """Sets the child_external_reference of this Subscription.


        :param child_external_reference: The child_external_reference of this Subscription.  # noqa: E501
        :type: str
        """

        self._child_external_reference = child_external_reference

    @property
    def metadata(self):
        """Gets the metadata of this Subscription.  # noqa: E501


        :return: The metadata of this Subscription.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Subscription.


        :param metadata: The metadata of this Subscription.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def price(self):
        """Gets the price of this Subscription.  # noqa: E501


        :return: The price of this Subscription.  # noqa: E501
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Subscription.


        :param price: The price of this Subscription.  # noqa: E501
        :type: Price
        """

        self._price = price

    @property
    def plan(self):
        """Gets the plan of this Subscription.  # noqa: E501


        :return: The plan of this Subscription.  # noqa: E501
        :rtype: SubscriptionPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Subscription.


        :param plan: The plan of this Subscription.  # noqa: E501
        :type: SubscriptionPlan
        """

        self._plan = plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Subscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
