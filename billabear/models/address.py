# coding: utf-8

"""
    BillaBear

    The REST API provided by BillaBear  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@billabear.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_name': 'str',
        'street_line_one': 'str',
        'street_line_two': 'str',
        'city': 'str',
        'region': 'str',
        'country': 'str',
        'postcode': 'str'
    }

    attribute_map = {
        'company_name': 'company_name',
        'street_line_one': 'street_line_one',
        'street_line_two': 'street_line_two',
        'city': 'city',
        'region': 'region',
        'country': 'country',
        'postcode': 'postcode'
    }

    def __init__(self, company_name=None, street_line_one=None, street_line_two=None, city=None, region=None, country=None, postcode=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._company_name = None
        self._street_line_one = None
        self._street_line_two = None
        self._city = None
        self._region = None
        self._country = None
        self._postcode = None
        self.discriminator = None
        if company_name is not None:
            self.company_name = company_name
        if street_line_one is not None:
            self.street_line_one = street_line_one
        if street_line_two is not None:
            self.street_line_two = street_line_two
        if city is not None:
            self.city = city
        if region is not None:
            self.region = region
        self.country = country
        if postcode is not None:
            self.postcode = postcode

    @property
    def company_name(self):
        """Gets the company_name of this Address.  # noqa: E501


        :return: The company_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Address.


        :param company_name: The company_name of this Address.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def street_line_one(self):
        """Gets the street_line_one of this Address.  # noqa: E501


        :return: The street_line_one of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street_line_one

    @street_line_one.setter
    def street_line_one(self, street_line_one):
        """Sets the street_line_one of this Address.


        :param street_line_one: The street_line_one of this Address.  # noqa: E501
        :type: str
        """

        self._street_line_one = street_line_one

    @property
    def street_line_two(self):
        """Gets the street_line_two of this Address.  # noqa: E501


        :return: The street_line_two of this Address.  # noqa: E501
        :rtype: str
        """
        return self._street_line_two

    @street_line_two.setter
    def street_line_two(self, street_line_two):
        """Sets the street_line_two of this Address.


        :param street_line_two: The street_line_two of this Address.  # noqa: E501
        :type: str
        """

        self._street_line_two = street_line_two

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501


        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.


        :param city: The city of this Address.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def region(self):
        """Gets the region of this Address.  # noqa: E501


        :return: The region of this Address.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Address.


        :param region: The region of this Address.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def country(self):
        """Gets the country of this Address.  # noqa: E501


        :return: The country of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.


        :param country: The country of this Address.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def postcode(self):
        """Gets the postcode of this Address.  # noqa: E501


        :return: The postcode of this Address.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this Address.


        :param postcode: The postcode of this Address.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
