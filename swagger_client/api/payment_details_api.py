# coding: utf-8

"""
    BillaBear

    The REST API provided by BillaBear  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@billabear.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PaymentDetailsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def complete_frontend_payment_details(self, body, customer_id, **kwargs):  # noqa: E501
        """Complete Frontend Detail Collection  # noqa: E501

        Complete frontend payment details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complete_frontend_payment_details(body, customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FrontendToken body: (required)
        :param str customer_id: The id of the customer to retrieve (required)
        :return: PaymentDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.complete_frontend_payment_details_with_http_info(body, customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.complete_frontend_payment_details_with_http_info(body, customer_id, **kwargs)  # noqa: E501
            return data

    def complete_frontend_payment_details_with_http_info(self, body, customer_id, **kwargs):  # noqa: E501
        """Complete Frontend Detail Collection  # noqa: E501

        Complete frontend payment details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complete_frontend_payment_details_with_http_info(body, customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FrontendToken body: (required)
        :param str customer_id: The id of the customer to retrieve (required)
        :return: PaymentDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method complete_frontend_payment_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `complete_frontend_payment_details`")  # noqa: E501
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `complete_frontend_payment_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/customer/{customerId}/payment-methods/frontend-payment-token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_payment_details(self, payment_details_id, **kwargs):  # noqa: E501
        """Delete  # noqa: E501

        Delete Payment Details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_payment_details(payment_details_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_details_id: The id of the payment details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_payment_details_with_http_info(payment_details_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_payment_details_with_http_info(payment_details_id, **kwargs)  # noqa: E501
            return data

    def delete_payment_details_with_http_info(self, payment_details_id, **kwargs):  # noqa: E501
        """Delete  # noqa: E501

        Delete Payment Details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_payment_details_with_http_info(payment_details_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_details_id: The id of the payment details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_details_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_payment_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_details_id' is set
        if ('payment_details_id' not in params or
                params['payment_details_id'] is None):
            raise ValueError("Missing the required parameter `payment_details_id` when calling `delete_payment_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_details_id' in params:
            path_params['paymentDetailsId'] = params['payment_details_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/payment-methods/{paymentDetailsId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_payment_details_customer(self, customer_id, payment_details_id, **kwargs):  # noqa: E501
        """Delete With Customer  # noqa: E501

        Delete Payment Details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_payment_details_customer(customer_id, payment_details_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: The id of the customer to retrieve (required)
        :param str payment_details_id: The id of the payment details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_payment_details_customer_with_http_info(customer_id, payment_details_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_payment_details_customer_with_http_info(customer_id, payment_details_id, **kwargs)  # noqa: E501
            return data

    def delete_payment_details_customer_with_http_info(self, customer_id, payment_details_id, **kwargs):  # noqa: E501
        """Delete With Customer  # noqa: E501

        Delete Payment Details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_payment_details_customer_with_http_info(customer_id, payment_details_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: The id of the customer to retrieve (required)
        :param str payment_details_id: The id of the payment details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'payment_details_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_payment_details_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `delete_payment_details_customer`")  # noqa: E501
        # verify the required parameter 'payment_details_id' is set
        if ('payment_details_id' not in params or
                params['payment_details_id'] is None):
            raise ValueError("Missing the required parameter `payment_details_id` when calling `delete_payment_details_customer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501
        if 'payment_details_id' in params:
            path_params['paymentDetailsId'] = params['payment_details_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/customer/{customerId}/payment-methods/{paymentDetailsId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_details(self, payment_details_id, **kwargs):  # noqa: E501
        """Fetch  # noqa: E501

        Fetch the payment cards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_details(payment_details_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_details_id: The id of the payment details (required)
        :return: PaymentDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_details_with_http_info(payment_details_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_details_with_http_info(payment_details_id, **kwargs)  # noqa: E501
            return data

    def get_payment_details_with_http_info(self, payment_details_id, **kwargs):  # noqa: E501
        """Fetch  # noqa: E501

        Fetch the payment cards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_details_with_http_info(payment_details_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_details_id: The id of the payment details (required)
        :return: PaymentDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_details_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_details_id' is set
        if ('payment_details_id' not in params or
                params['payment_details_id'] is None):
            raise ValueError("Missing the required parameter `payment_details_id` when calling `get_payment_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_details_id' in params:
            path_params['paymentDetailsId'] = params['payment_details_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/payment-methods/{paymentDetailsId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_payment_details(self, customer_id, **kwargs):  # noqa: E501
        """List Customer's Payment Details  # noqa: E501

        List all customers <br><br>Added in version 1.1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_payment_details(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: The id of the customer to retrieve (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_payment_details_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_payment_details_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def list_payment_details_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """List Customer's Payment Details  # noqa: E501

        List all customers <br><br>Added in version 1.1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_payment_details_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: The id of the customer to retrieve (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_payment_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `list_payment_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/customer/{customerId}/payment-methods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def make_default_payment_details(self, customer_id, payment_details_id, **kwargs):  # noqa: E501
        """Make Default  # noqa: E501

        Delete Payment Details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.make_default_payment_details(customer_id, payment_details_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: The id of the customer to retrieve (required)
        :param str payment_details_id: The id of the payment details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.make_default_payment_details_with_http_info(customer_id, payment_details_id, **kwargs)  # noqa: E501
        else:
            (data) = self.make_default_payment_details_with_http_info(customer_id, payment_details_id, **kwargs)  # noqa: E501
            return data

    def make_default_payment_details_with_http_info(self, customer_id, payment_details_id, **kwargs):  # noqa: E501
        """Make Default  # noqa: E501

        Delete Payment Details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.make_default_payment_details_with_http_info(customer_id, payment_details_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: The id of the customer to retrieve (required)
        :param str payment_details_id: The id of the payment details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'payment_details_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method make_default_payment_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `make_default_payment_details`")  # noqa: E501
        # verify the required parameter 'payment_details_id' is set
        if ('payment_details_id' not in params or
                params['payment_details_id'] is None):
            raise ValueError("Missing the required parameter `payment_details_id` when calling `make_default_payment_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501
        if 'payment_details_id' in params:
            path_params['paymentDetailsId'] = params['payment_details_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/payment-methods/{paymentDetailsId}/default', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def make_default_payment_details_customer(self, customer_id, payment_details_id, **kwargs):  # noqa: E501
        """Make Default With Customer  # noqa: E501

        Delete Payment Details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.make_default_payment_details_customer(customer_id, payment_details_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: The id of the customer to retrieve (required)
        :param str payment_details_id: The id of the payment details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.make_default_payment_details_customer_with_http_info(customer_id, payment_details_id, **kwargs)  # noqa: E501
        else:
            (data) = self.make_default_payment_details_customer_with_http_info(customer_id, payment_details_id, **kwargs)  # noqa: E501
            return data

    def make_default_payment_details_customer_with_http_info(self, customer_id, payment_details_id, **kwargs):  # noqa: E501
        """Make Default With Customer  # noqa: E501

        Delete Payment Details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.make_default_payment_details_customer_with_http_info(customer_id, payment_details_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: The id of the customer to retrieve (required)
        :param str payment_details_id: The id of the payment details (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'payment_details_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method make_default_payment_details_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `make_default_payment_details_customer`")  # noqa: E501
        # verify the required parameter 'payment_details_id' is set
        if ('payment_details_id' not in params or
                params['payment_details_id'] is None):
            raise ValueError("Missing the required parameter `payment_details_id` when calling `make_default_payment_details_customer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501
        if 'payment_details_id' in params:
            path_params['paymentDetailsId'] = params['payment_details_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/customer/{customerId}/payment-methods/{paymentDetailsId}/default', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_frontend_payment_details(self, customer_id, **kwargs):  # noqa: E501
        """Start Frontend Detail Collection  # noqa: E501

        Start frontend payment details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_frontend_payment_details(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: The id of the customer to retrieve (required)
        :return: FrontendToken
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_frontend_payment_details_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_frontend_payment_details_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def start_frontend_payment_details_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """Start Frontend Detail Collection  # noqa: E501

        Start frontend payment details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_frontend_payment_details_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: The id of the customer to retrieve (required)
        :return: FrontendToken
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_frontend_payment_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `start_frontend_payment_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/customer/{customerId}/payment-methods/frontend-payment-token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FrontendToken',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
