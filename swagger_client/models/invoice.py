# coding: utf-8

"""
    BillaBear

    The REST API provided by BillaBear  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@billabear.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Invoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'number': 'str',
        'currency': 'str',
        'customer': 'Customer',
        'tax_total': 'int',
        'sub_total': 'int',
        'amount_due': 'int',
        'paid': 'bool',
        'pay_link': 'str',
        'created_at': 'str',
        'paid_at': 'str',
        'due_date': 'str',
        'biller_address': 'Address',
        'payeeaddress': 'Address',
        'lines': 'list[InvoiceLines]'
    }

    attribute_map = {
        'id': 'id',
        'number': 'number',
        'currency': 'currency',
        'customer': 'customer',
        'tax_total': 'tax_total',
        'sub_total': 'sub_total',
        'amount_due': 'amount_due',
        'paid': 'paid',
        'pay_link': 'pay_link',
        'created_at': 'created_at',
        'paid_at': 'paid_at',
        'due_date': 'due_date',
        'biller_address': 'biller_address',
        'payeeaddress': 'payeeaddress',
        'lines': 'lines'
    }

    def __init__(self, id=None, number=None, currency=None, customer=None, tax_total=None, sub_total=None, amount_due=None, paid=None, pay_link=None, created_at=None, paid_at=None, due_date=None, biller_address=None, payeeaddress=None, lines=None):  # noqa: E501
        """Invoice - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._number = None
        self._currency = None
        self._customer = None
        self._tax_total = None
        self._sub_total = None
        self._amount_due = None
        self._paid = None
        self._pay_link = None
        self._created_at = None
        self._paid_at = None
        self._due_date = None
        self._biller_address = None
        self._payeeaddress = None
        self._lines = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if number is not None:
            self.number = number
        if currency is not None:
            self.currency = currency
        if customer is not None:
            self.customer = customer
        if tax_total is not None:
            self.tax_total = tax_total
        if sub_total is not None:
            self.sub_total = sub_total
        if amount_due is not None:
            self.amount_due = amount_due
        if paid is not None:
            self.paid = paid
        if pay_link is not None:
            self.pay_link = pay_link
        if created_at is not None:
            self.created_at = created_at
        if paid_at is not None:
            self.paid_at = paid_at
        if due_date is not None:
            self.due_date = due_date
        if biller_address is not None:
            self.biller_address = biller_address
        if payeeaddress is not None:
            self.payeeaddress = payeeaddress
        if lines is not None:
            self.lines = lines

    @property
    def id(self):
        """Gets the id of this Invoice.  # noqa: E501


        :return: The id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invoice.


        :param id: The id of this Invoice.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this Invoice.  # noqa: E501


        :return: The number of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Invoice.


        :param number: The number of this Invoice.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def currency(self):
        """Gets the currency of this Invoice.  # noqa: E501


        :return: The currency of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Invoice.


        :param currency: The currency of this Invoice.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def customer(self):
        """Gets the customer of this Invoice.  # noqa: E501


        :return: The customer of this Invoice.  # noqa: E501
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Invoice.


        :param customer: The customer of this Invoice.  # noqa: E501
        :type: Customer
        """

        self._customer = customer

    @property
    def tax_total(self):
        """Gets the tax_total of this Invoice.  # noqa: E501


        :return: The tax_total of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._tax_total

    @tax_total.setter
    def tax_total(self, tax_total):
        """Sets the tax_total of this Invoice.


        :param tax_total: The tax_total of this Invoice.  # noqa: E501
        :type: int
        """

        self._tax_total = tax_total

    @property
    def sub_total(self):
        """Gets the sub_total of this Invoice.  # noqa: E501


        :return: The sub_total of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this Invoice.


        :param sub_total: The sub_total of this Invoice.  # noqa: E501
        :type: int
        """

        self._sub_total = sub_total

    @property
    def amount_due(self):
        """Gets the amount_due of this Invoice.  # noqa: E501


        :return: The amount_due of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this Invoice.


        :param amount_due: The amount_due of this Invoice.  # noqa: E501
        :type: int
        """

        self._amount_due = amount_due

    @property
    def paid(self):
        """Gets the paid of this Invoice.  # noqa: E501


        :return: The paid of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """Sets the paid of this Invoice.


        :param paid: The paid of this Invoice.  # noqa: E501
        :type: bool
        """

        self._paid = paid

    @property
    def pay_link(self):
        """Gets the pay_link of this Invoice.  # noqa: E501


        :return: The pay_link of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._pay_link

    @pay_link.setter
    def pay_link(self, pay_link):
        """Sets the pay_link of this Invoice.


        :param pay_link: The pay_link of this Invoice.  # noqa: E501
        :type: str
        """

        self._pay_link = pay_link

    @property
    def created_at(self):
        """Gets the created_at of this Invoice.  # noqa: E501


        :return: The created_at of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Invoice.


        :param created_at: The created_at of this Invoice.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def paid_at(self):
        """Gets the paid_at of this Invoice.  # noqa: E501


        :return: The paid_at of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._paid_at

    @paid_at.setter
    def paid_at(self, paid_at):
        """Sets the paid_at of this Invoice.


        :param paid_at: The paid_at of this Invoice.  # noqa: E501
        :type: str
        """

        self._paid_at = paid_at

    @property
    def due_date(self):
        """Gets the due_date of this Invoice.  # noqa: E501


        :return: The due_date of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Invoice.


        :param due_date: The due_date of this Invoice.  # noqa: E501
        :type: str
        """

        self._due_date = due_date

    @property
    def biller_address(self):
        """Gets the biller_address of this Invoice.  # noqa: E501


        :return: The biller_address of this Invoice.  # noqa: E501
        :rtype: Address
        """
        return self._biller_address

    @biller_address.setter
    def biller_address(self, biller_address):
        """Sets the biller_address of this Invoice.


        :param biller_address: The biller_address of this Invoice.  # noqa: E501
        :type: Address
        """

        self._biller_address = biller_address

    @property
    def payeeaddress(self):
        """Gets the payeeaddress of this Invoice.  # noqa: E501


        :return: The payeeaddress of this Invoice.  # noqa: E501
        :rtype: Address
        """
        return self._payeeaddress

    @payeeaddress.setter
    def payeeaddress(self, payeeaddress):
        """Sets the payeeaddress of this Invoice.


        :param payeeaddress: The payeeaddress of this Invoice.  # noqa: E501
        :type: Address
        """

        self._payeeaddress = payeeaddress

    @property
    def lines(self):
        """Gets the lines of this Invoice.  # noqa: E501


        :return: The lines of this Invoice.  # noqa: E501
        :rtype: list[InvoiceLines]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this Invoice.


        :param lines: The lines of this Invoice.  # noqa: E501
        :type: list[InvoiceLines]
        """

        self._lines = lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Invoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
