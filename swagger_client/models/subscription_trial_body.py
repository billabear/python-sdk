# coding: utf-8

"""
    BillaBear

    The REST API provided by BillaBear  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@billabear.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubscriptionTrialBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_plan': 'str',
        'card_token': 'str',
        'seat_numbrers': 'int',
        'trial_length_days': 'int'
    }

    attribute_map = {
        'subscription_plan': 'subscription_plan',
        'card_token': 'card_token',
        'seat_numbrers': 'seat_numbrers',
        'trial_length_days': 'trial_length_days'
    }

    def __init__(self, subscription_plan=None, card_token=None, seat_numbrers=None, trial_length_days=None):  # noqa: E501
        """SubscriptionTrialBody - a model defined in Swagger"""  # noqa: E501
        self._subscription_plan = None
        self._card_token = None
        self._seat_numbrers = None
        self._trial_length_days = None
        self.discriminator = None
        self.subscription_plan = subscription_plan
        if card_token is not None:
            self.card_token = card_token
        if seat_numbrers is not None:
            self.seat_numbrers = seat_numbrers
        if trial_length_days is not None:
            self.trial_length_days = trial_length_days

    @property
    def subscription_plan(self):
        """Gets the subscription_plan of this SubscriptionTrialBody.  # noqa: E501

        The ID for the subscription plan to be used (Can also be the code name)  # noqa: E501

        :return: The subscription_plan of this SubscriptionTrialBody.  # noqa: E501
        :rtype: str
        """
        return self._subscription_plan

    @subscription_plan.setter
    def subscription_plan(self, subscription_plan):
        """Sets the subscription_plan of this SubscriptionTrialBody.

        The ID for the subscription plan to be used (Can also be the code name)  # noqa: E501

        :param subscription_plan: The subscription_plan of this SubscriptionTrialBody.  # noqa: E501
        :type: str
        """
        if subscription_plan is None:
            raise ValueError("Invalid value for `subscription_plan`, must not be `None`")  # noqa: E501

        self._subscription_plan = subscription_plan

    @property
    def card_token(self):
        """Gets the card_token of this SubscriptionTrialBody.  # noqa: E501

        A stripe card token that's been created using Stripe's js sdk. It'll create the payment details for the customer.  # noqa: E501

        :return: The card_token of this SubscriptionTrialBody.  # noqa: E501
        :rtype: str
        """
        return self._card_token

    @card_token.setter
    def card_token(self, card_token):
        """Sets the card_token of this SubscriptionTrialBody.

        A stripe card token that's been created using Stripe's js sdk. It'll create the payment details for the customer.  # noqa: E501

        :param card_token: The card_token of this SubscriptionTrialBody.  # noqa: E501
        :type: str
        """

        self._card_token = card_token

    @property
    def seat_numbrers(self):
        """Gets the seat_numbrers of this SubscriptionTrialBody.  # noqa: E501


        :return: The seat_numbrers of this SubscriptionTrialBody.  # noqa: E501
        :rtype: int
        """
        return self._seat_numbrers

    @seat_numbrers.setter
    def seat_numbrers(self, seat_numbrers):
        """Sets the seat_numbrers of this SubscriptionTrialBody.


        :param seat_numbrers: The seat_numbrers of this SubscriptionTrialBody.  # noqa: E501
        :type: int
        """

        self._seat_numbrers = seat_numbrers

    @property
    def trial_length_days(self):
        """Gets the trial_length_days of this SubscriptionTrialBody.  # noqa: E501


        :return: The trial_length_days of this SubscriptionTrialBody.  # noqa: E501
        :rtype: int
        """
        return self._trial_length_days

    @trial_length_days.setter
    def trial_length_days(self, trial_length_days):
        """Sets the trial_length_days of this SubscriptionTrialBody.


        :param trial_length_days: The trial_length_days of this SubscriptionTrialBody.  # noqa: E501
        :type: int
        """

        self._trial_length_days = trial_length_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionTrialBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionTrialBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
