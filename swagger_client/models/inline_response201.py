# coding: utf-8

"""
    BillaBear

    The REST API provided by BillaBear  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@billabear.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse201(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'Uuid',
        'name': 'str',
        'currency': 'str',
        'customer': 'Customer',
        'billing_admin': 'BillingAdmin',
        'total': 'int',
        'sub_total': 'int',
        'tax_total': 'int',
        'lines': 'list[InlineResponse201Lines]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'currency': 'currency',
        'customer': 'customer',
        'billing_admin': 'billing_admin',
        'total': 'total',
        'sub_total': 'sub_total',
        'tax_total': 'tax_total',
        'lines': 'lines'
    }

    def __init__(self, id=None, name=None, currency=None, customer=None, billing_admin=None, total=None, sub_total=None, tax_total=None, lines=None):  # noqa: E501
        """InlineResponse201 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._currency = None
        self._customer = None
        self._billing_admin = None
        self._total = None
        self._sub_total = None
        self._tax_total = None
        self._lines = None
        self.discriminator = None
        self.id = id
        if name is not None:
            self.name = name
        if currency is not None:
            self.currency = currency
        if customer is not None:
            self.customer = customer
        if billing_admin is not None:
            self.billing_admin = billing_admin
        if total is not None:
            self.total = total
        if sub_total is not None:
            self.sub_total = sub_total
        if tax_total is not None:
            self.tax_total = tax_total
        if lines is not None:
            self.lines = lines

    @property
    def id(self):
        """Gets the id of this InlineResponse201.  # noqa: E501


        :return: The id of this InlineResponse201.  # noqa: E501
        :rtype: Uuid
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse201.


        :param id: The id of this InlineResponse201.  # noqa: E501
        :type: Uuid
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse201.  # noqa: E501


        :return: The name of this InlineResponse201.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse201.


        :param name: The name of this InlineResponse201.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def currency(self):
        """Gets the currency of this InlineResponse201.  # noqa: E501


        :return: The currency of this InlineResponse201.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InlineResponse201.


        :param currency: The currency of this InlineResponse201.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def customer(self):
        """Gets the customer of this InlineResponse201.  # noqa: E501


        :return: The customer of this InlineResponse201.  # noqa: E501
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this InlineResponse201.


        :param customer: The customer of this InlineResponse201.  # noqa: E501
        :type: Customer
        """

        self._customer = customer

    @property
    def billing_admin(self):
        """Gets the billing_admin of this InlineResponse201.  # noqa: E501


        :return: The billing_admin of this InlineResponse201.  # noqa: E501
        :rtype: BillingAdmin
        """
        return self._billing_admin

    @billing_admin.setter
    def billing_admin(self, billing_admin):
        """Sets the billing_admin of this InlineResponse201.


        :param billing_admin: The billing_admin of this InlineResponse201.  # noqa: E501
        :type: BillingAdmin
        """

        self._billing_admin = billing_admin

    @property
    def total(self):
        """Gets the total of this InlineResponse201.  # noqa: E501


        :return: The total of this InlineResponse201.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InlineResponse201.


        :param total: The total of this InlineResponse201.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def sub_total(self):
        """Gets the sub_total of this InlineResponse201.  # noqa: E501


        :return: The sub_total of this InlineResponse201.  # noqa: E501
        :rtype: int
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this InlineResponse201.


        :param sub_total: The sub_total of this InlineResponse201.  # noqa: E501
        :type: int
        """

        self._sub_total = sub_total

    @property
    def tax_total(self):
        """Gets the tax_total of this InlineResponse201.  # noqa: E501


        :return: The tax_total of this InlineResponse201.  # noqa: E501
        :rtype: int
        """
        return self._tax_total

    @tax_total.setter
    def tax_total(self, tax_total):
        """Sets the tax_total of this InlineResponse201.


        :param tax_total: The tax_total of this InlineResponse201.  # noqa: E501
        :type: int
        """

        self._tax_total = tax_total

    @property
    def lines(self):
        """Gets the lines of this InlineResponse201.  # noqa: E501


        :return: The lines of this InlineResponse201.  # noqa: E501
        :rtype: list[InlineResponse201Lines]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this InlineResponse201.


        :param lines: The lines of this InlineResponse201.  # noqa: E501
        :type: list[InlineResponse201Lines]
        """

        self._lines = lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse201, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse201):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
