# coding: utf-8

"""
    BillaBear

    The REST API provided by BillaBear  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@billabear.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Customer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'email': 'str',
        'tax_number': 'str',
        'standard_tax_rate': 'float',
        'digital_tax_rate': 'float',
        'billing_type': 'str',
        'type': 'str',
        'reference': 'str',
        'external_reference': 'str',
        'address': 'Address',
        'locale': 'str',
        'brand': 'str',
        'invoice_format': 'str',
        'marketing_opt_in': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'tax_number': 'tax_number',
        'standard_tax_rate': 'standard_tax_rate',
        'digital_tax_rate': 'digital_tax_rate',
        'billing_type': 'billing_type',
        'type': 'type',
        'reference': 'reference',
        'external_reference': 'external_reference',
        'address': 'address',
        'locale': 'locale',
        'brand': 'brand',
        'invoice_format': 'invoice_format',
        'marketing_opt_in': 'marketing_opt_in'
    }

    def __init__(self, id=None, email=None, tax_number=None, standard_tax_rate=None, digital_tax_rate=None, billing_type=None, type=None, reference=None, external_reference=None, address=None, locale=None, brand=None, invoice_format=None, marketing_opt_in=None):  # noqa: E501
        """Customer - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._email = None
        self._tax_number = None
        self._standard_tax_rate = None
        self._digital_tax_rate = None
        self._billing_type = None
        self._type = None
        self._reference = None
        self._external_reference = None
        self._address = None
        self._locale = None
        self._brand = None
        self._invoice_format = None
        self._marketing_opt_in = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.email = email
        if tax_number is not None:
            self.tax_number = tax_number
        if standard_tax_rate is not None:
            self.standard_tax_rate = standard_tax_rate
        if digital_tax_rate is not None:
            self.digital_tax_rate = digital_tax_rate
        if billing_type is not None:
            self.billing_type = billing_type
        if type is not None:
            self.type = type
        if reference is not None:
            self.reference = reference
        if external_reference is not None:
            self.external_reference = external_reference
        if address is not None:
            self.address = address
        if locale is not None:
            self.locale = locale
        if brand is not None:
            self.brand = brand
        if invoice_format is not None:
            self.invoice_format = invoice_format
        if marketing_opt_in is not None:
            self.marketing_opt_in = marketing_opt_in

    @property
    def id(self):
        """Gets the id of this Customer.  # noqa: E501


        :return: The id of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Customer.


        :param id: The id of this Customer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this Customer.  # noqa: E501


        :return: The email of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Customer.


        :param email: The email of this Customer.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def tax_number(self):
        """Gets the tax_number of this Customer.  # noqa: E501

        The tax number for the customer <strong>Since 1.1</strong>  # noqa: E501

        :return: The tax_number of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number):
        """Sets the tax_number of this Customer.

        The tax number for the customer <strong>Since 1.1</strong>  # noqa: E501

        :param tax_number: The tax_number of this Customer.  # noqa: E501
        :type: str
        """

        self._tax_number = tax_number

    @property
    def standard_tax_rate(self):
        """Gets the standard_tax_rate of this Customer.  # noqa: E501

        The tax rate for the customer on for standard services a <strong>Since 1.1</strong>  # noqa: E501

        :return: The standard_tax_rate of this Customer.  # noqa: E501
        :rtype: float
        """
        return self._standard_tax_rate

    @standard_tax_rate.setter
    def standard_tax_rate(self, standard_tax_rate):
        """Sets the standard_tax_rate of this Customer.

        The tax rate for the customer on for standard services a <strong>Since 1.1</strong>  # noqa: E501

        :param standard_tax_rate: The standard_tax_rate of this Customer.  # noqa: E501
        :type: float
        """

        self._standard_tax_rate = standard_tax_rate

    @property
    def digital_tax_rate(self):
        """Gets the digital_tax_rate of this Customer.  # noqa: E501

        The tax rate for the customer on digital services <strong>Since 1.1</strong>  # noqa: E501

        :return: The digital_tax_rate of this Customer.  # noqa: E501
        :rtype: float
        """
        return self._digital_tax_rate

    @digital_tax_rate.setter
    def digital_tax_rate(self, digital_tax_rate):
        """Sets the digital_tax_rate of this Customer.

        The tax rate for the customer on digital services <strong>Since 1.1</strong>  # noqa: E501

        :param digital_tax_rate: The digital_tax_rate of this Customer.  # noqa: E501
        :type: float
        """

        self._digital_tax_rate = digital_tax_rate

    @property
    def billing_type(self):
        """Gets the billing_type of this Customer.  # noqa: E501

        Choice between card and invoice  # noqa: E501

        :return: The billing_type of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._billing_type

    @billing_type.setter
    def billing_type(self, billing_type):
        """Sets the billing_type of this Customer.

        Choice between card and invoice  # noqa: E501

        :param billing_type: The billing_type of this Customer.  # noqa: E501
        :type: str
        """
        allowed_values = ["card", "invoice"]  # noqa: E501
        if billing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_type` ({0}), must be one of {1}"  # noqa: E501
                .format(billing_type, allowed_values)
            )

        self._billing_type = billing_type

    @property
    def type(self):
        """Gets the type of this Customer.  # noqa: E501

        Choice between 'individual' and 'business'. When not provided 'individual' is used. <strong>Since 1.1</strong>  # noqa: E501

        :return: The type of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Customer.

        Choice between 'individual' and 'business'. When not provided 'individual' is used. <strong>Since 1.1</strong>  # noqa: E501

        :param type: The type of this Customer.  # noqa: E501
        :type: str
        """
        allowed_values = ["individual", "business"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def reference(self):
        """Gets the reference of this Customer.  # noqa: E501


        :return: The reference of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Customer.


        :param reference: The reference of this Customer.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def external_reference(self):
        """Gets the external_reference of this Customer.  # noqa: E501


        :return: The external_reference of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._external_reference

    @external_reference.setter
    def external_reference(self, external_reference):
        """Sets the external_reference of this Customer.


        :param external_reference: The external_reference of this Customer.  # noqa: E501
        :type: str
        """

        self._external_reference = external_reference

    @property
    def address(self):
        """Gets the address of this Customer.  # noqa: E501


        :return: The address of this Customer.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Customer.


        :param address: The address of this Customer.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def locale(self):
        """Gets the locale of this Customer.  # noqa: E501

        Defaults to 'en' if not sent.  # noqa: E501

        :return: The locale of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Customer.

        Defaults to 'en' if not sent.  # noqa: E501

        :param locale: The locale of this Customer.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def brand(self):
        """Gets the brand of this Customer.  # noqa: E501

        Defaults to 'default' if not sent.  # noqa: E501

        :return: The brand of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Customer.

        Defaults to 'default' if not sent.  # noqa: E501

        :param brand: The brand of this Customer.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def invoice_format(self):
        """Gets the invoice_format of this Customer.  # noqa: E501

        Choice between 'pdf' and 'xrechnung'. <strong>Since 2024.02.01</strong>  # noqa: E501

        :return: The invoice_format of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._invoice_format

    @invoice_format.setter
    def invoice_format(self, invoice_format):
        """Sets the invoice_format of this Customer.

        Choice between 'pdf' and 'xrechnung'. <strong>Since 2024.02.01</strong>  # noqa: E501

        :param invoice_format: The invoice_format of this Customer.  # noqa: E501
        :type: str
        """
        allowed_values = ["pdf", "xrechnung"]  # noqa: E501
        if invoice_format not in allowed_values:
            raise ValueError(
                "Invalid value for `invoice_format` ({0}), must be one of {1}"  # noqa: E501
                .format(invoice_format, allowed_values)
            )

        self._invoice_format = invoice_format

    @property
    def marketing_opt_in(self):
        """Gets the marketing_opt_in of this Customer.  # noqa: E501

        If the customer has opted in for marketing  # noqa: E501

        :return: The marketing_opt_in of this Customer.  # noqa: E501
        :rtype: bool
        """
        return self._marketing_opt_in

    @marketing_opt_in.setter
    def marketing_opt_in(self, marketing_opt_in):
        """Sets the marketing_opt_in of this Customer.

        If the customer has opted in for marketing  # noqa: E501

        :param marketing_opt_in: The marketing_opt_in of this Customer.  # noqa: E501
        :type: bool
        """

        self._marketing_opt_in = marketing_opt_in

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Customer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Customer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
