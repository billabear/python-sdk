# coding: utf-8

"""
    BillaBear

    The REST API provided by BillaBear  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@billabear.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Price(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'amount': 'int',
        'currency': 'str',
        'external_reference': 'str',
        'recurring': 'bool',
        'schedule': 'str',
        'including_tax': 'bool',
        'public': 'bool',
        'metric': 'Metric'
    }

    attribute_map = {
        'id': 'id',
        'amount': 'amount',
        'currency': 'currency',
        'external_reference': 'external_reference',
        'recurring': 'recurring',
        'schedule': 'schedule',
        'including_tax': 'including_tax',
        'public': 'public',
        'metric': 'metric'
    }

    def __init__(self, id=None, amount=None, currency=None, external_reference=None, recurring=None, schedule=None, including_tax=None, public=None, metric=None):  # noqa: E501
        """Price - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._amount = None
        self._currency = None
        self._external_reference = None
        self._recurring = None
        self._schedule = None
        self._including_tax = None
        self._public = None
        self._metric = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.amount = amount
        self.currency = currency
        if external_reference is not None:
            self.external_reference = external_reference
        self.recurring = recurring
        if schedule is not None:
            self.schedule = schedule
        if including_tax is not None:
            self.including_tax = including_tax
        if public is not None:
            self.public = public
        if metric is not None:
            self.metric = metric

    @property
    def id(self):
        """Gets the id of this Price.  # noqa: E501


        :return: The id of this Price.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Price.


        :param id: The id of this Price.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def amount(self):
        """Gets the amount of this Price.  # noqa: E501


        :return: The amount of this Price.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Price.


        :param amount: The amount of this Price.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this Price.  # noqa: E501

        Three-letter ISO currency code. Must be upper-case  # noqa: E501

        :return: The currency of this Price.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Price.

        Three-letter ISO currency code. Must be upper-case  # noqa: E501

        :param currency: The currency of this Price.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def external_reference(self):
        """Gets the external_reference of this Price.  # noqa: E501


        :return: The external_reference of this Price.  # noqa: E501
        :rtype: str
        """
        return self._external_reference

    @external_reference.setter
    def external_reference(self, external_reference):
        """Sets the external_reference of this Price.


        :param external_reference: The external_reference of this Price.  # noqa: E501
        :type: str
        """

        self._external_reference = external_reference

    @property
    def recurring(self):
        """Gets the recurring of this Price.  # noqa: E501


        :return: The recurring of this Price.  # noqa: E501
        :rtype: bool
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """Sets the recurring of this Price.


        :param recurring: The recurring of this Price.  # noqa: E501
        :type: bool
        """
        if recurring is None:
            raise ValueError("Invalid value for `recurring`, must not be `None`")  # noqa: E501

        self._recurring = recurring

    @property
    def schedule(self):
        """Gets the schedule of this Price.  # noqa: E501

        Required if recurring is true  # noqa: E501

        :return: The schedule of this Price.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Price.

        Required if recurring is true  # noqa: E501

        :param schedule: The schedule of this Price.  # noqa: E501
        :type: str
        """
        allowed_values = ["week", "month", "year", "one-off"]  # noqa: E501
        if schedule not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule` ({0}), must be one of {1}"  # noqa: E501
                .format(schedule, allowed_values)
            )

        self._schedule = schedule

    @property
    def including_tax(self):
        """Gets the including_tax of this Price.  # noqa: E501

        If the price is including tax. If false tax will be added on top of the price.  # noqa: E501

        :return: The including_tax of this Price.  # noqa: E501
        :rtype: bool
        """
        return self._including_tax

    @including_tax.setter
    def including_tax(self, including_tax):
        """Sets the including_tax of this Price.

        If the price is including tax. If false tax will be added on top of the price.  # noqa: E501

        :param including_tax: The including_tax of this Price.  # noqa: E501
        :type: bool
        """

        self._including_tax = including_tax

    @property
    def public(self):
        """Gets the public of this Price.  # noqa: E501


        :return: The public of this Price.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this Price.


        :param public: The public of this Price.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def metric(self):
        """Gets the metric of this Price.  # noqa: E501


        :return: The metric of this Price.  # noqa: E501
        :rtype: Metric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this Price.


        :param metric: The metric of this Price.  # noqa: E501
        :type: Metric
        """

        self._metric = metric

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Price, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Price):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
