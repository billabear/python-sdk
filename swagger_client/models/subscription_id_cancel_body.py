# coding: utf-8

"""
    BillaBear

    The REST API provided by BillaBear  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@billabear.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubscriptionIdCancelBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'when': 'str',
        'refund_type': 'str',
        '_date': 'date',
        'comment': 'str'
    }

    attribute_map = {
        'when': 'when',
        'refund_type': 'refund_type',
        '_date': 'date',
        'comment': 'comment'
    }

    def __init__(self, when='end-of-run', refund_type='none', _date=None, comment=None):  # noqa: E501
        """SubscriptionIdCancelBody - a model defined in Swagger"""  # noqa: E501
        self._when = None
        self._refund_type = None
        self.__date = None
        self._comment = None
        self.discriminator = None
        self.when = when
        self.refund_type = refund_type
        if _date is not None:
            self._date = _date
        if comment is not None:
            self.comment = comment

    @property
    def when(self):
        """Gets the when of this SubscriptionIdCancelBody.  # noqa: E501


        :return: The when of this SubscriptionIdCancelBody.  # noqa: E501
        :rtype: str
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this SubscriptionIdCancelBody.


        :param when: The when of this SubscriptionIdCancelBody.  # noqa: E501
        :type: str
        """
        if when is None:
            raise ValueError("Invalid value for `when`, must not be `None`")  # noqa: E501
        allowed_values = ["end-of-run", "instantly", "specific-date"]  # noqa: E501
        if when not in allowed_values:
            raise ValueError(
                "Invalid value for `when` ({0}), must be one of {1}"  # noqa: E501
                .format(when, allowed_values)
            )

        self._when = when

    @property
    def refund_type(self):
        """Gets the refund_type of this SubscriptionIdCancelBody.  # noqa: E501


        :return: The refund_type of this SubscriptionIdCancelBody.  # noqa: E501
        :rtype: str
        """
        return self._refund_type

    @refund_type.setter
    def refund_type(self, refund_type):
        """Sets the refund_type of this SubscriptionIdCancelBody.


        :param refund_type: The refund_type of this SubscriptionIdCancelBody.  # noqa: E501
        :type: str
        """
        if refund_type is None:
            raise ValueError("Invalid value for `refund_type`, must not be `None`")  # noqa: E501
        allowed_values = ["none", "full", "prorate"]  # noqa: E501
        if refund_type not in allowed_values:
            raise ValueError(
                "Invalid value for `refund_type` ({0}), must be one of {1}"  # noqa: E501
                .format(refund_type, allowed_values)
            )

        self._refund_type = refund_type

    @property
    def _date(self):
        """Gets the _date of this SubscriptionIdCancelBody.  # noqa: E501


        :return: The _date of this SubscriptionIdCancelBody.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this SubscriptionIdCancelBody.


        :param _date: The _date of this SubscriptionIdCancelBody.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def comment(self):
        """Gets the comment of this SubscriptionIdCancelBody.  # noqa: E501


        :return: The comment of this SubscriptionIdCancelBody.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SubscriptionIdCancelBody.


        :param comment: The comment of this SubscriptionIdCancelBody.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionIdCancelBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionIdCancelBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
